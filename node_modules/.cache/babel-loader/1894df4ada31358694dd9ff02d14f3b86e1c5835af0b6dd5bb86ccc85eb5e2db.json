{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\CascadeProjects\\\\tp-simulator-react\\\\src\\\\components\\\\TradingViewChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartContainer = styled.div`\n  height: 500px;\n  width: 100%;\n  margin: 20px 0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background: white;\n`;\n_c = ChartContainer;\nconst TradingViewChart = ({\n  pastData,\n  futureData,\n  showFuture,\n  onTPLineMove\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candlestickSeriesRef = useRef(null);\n  const tpLineRef = useRef(null);\n  const timeLineRef = useRef(null);\n\n  // Initialize chart\n  useEffect(() => {\n    if (!chartContainerRef.current || chartRef.current) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 500,\n      layout: {\n        background: {\n          color: '#ffffff'\n        },\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#f0f0f0'\n        },\n        horzLines: {\n          color: '#f0f0f0'\n        }\n      },\n      crosshair: {\n        mode: 'normal'\n      },\n      rightPriceScale: {\n        borderColor: '#ddd',\n        autoScale: true\n      },\n      timeScale: {\n        borderColor: '#ddd',\n        timeVisible: true,\n        secondsVisible: false\n      }\n    });\n\n    // Create candlestick series\n    const candlestickSeries = chart.addCandlestickSeries({\n      upColor: '#26a69a',\n      downColor: '#ef5350',\n      borderVisible: false,\n      wickUpColor: '#26a69a',\n      wickDownColor: '#ef5350'\n    });\n\n    // Store refs\n    chartRef.current = chart;\n    candlestickSeriesRef.current = candlestickSeries;\n\n    // Handle window resize\n    const handleResize = () => {\n      if (chartRef.current && chartContainerRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n        candlestickSeriesRef.current = null;\n        tpLineRef.current = null;\n        timeLineRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update data and lines\n  useEffect(() => {\n    if (!chartRef.current || !candlestickSeriesRef.current || !(pastData !== null && pastData !== void 0 && pastData.length) || !(futureData !== null && futureData !== void 0 && futureData.length)) {\n      return;\n    }\n    try {\n      // Update chart data\n      const allData = showFuture ? [...pastData, ...futureData] : pastData;\n      candlestickSeriesRef.current.setData(allData);\n\n      // Remove existing lines\n      if (timeLineRef.current) {\n        candlestickSeriesRef.current.removePriceLine(timeLineRef.current);\n      }\n      if (tpLineRef.current) {\n        candlestickSeriesRef.current.removePriceLine(tpLineRef.current);\n      }\n\n      // Add current time marker\n      timeLineRef.current = candlestickSeriesRef.current.createPriceLine({\n        price: pastData[pastData.length - 1].close,\n        color: '#FF0000',\n        lineWidth: 2,\n        lineStyle: 0,\n        // Solid\n        axisLabelVisible: true,\n        title: 'Current Time'\n      });\n\n      // Add TP line\n      const maxPrice = Math.max(...allData.map(d => d.high));\n      tpLineRef.current = candlestickSeriesRef.current.createPriceLine({\n        price: maxPrice - 1,\n        color: '#2196F3',\n        lineWidth: 2,\n        lineStyle: 2,\n        // Dashed\n        axisLabelVisible: true,\n        title: 'Take Profit',\n        draggable: true\n      });\n\n      // Handle TP line drag\n      if (onTPLineMove) {\n        chartRef.current.subscribeCustomPriceLineDragged(tpLineRef.current, price => {\n          onTPLineMove(price);\n        });\n      }\n\n      // Fit content\n      chartRef.current.timeScale().fitContent();\n    } catch (error) {\n      console.error('Error updating chart:', error);\n    }\n  }, [pastData, futureData, showFuture, onTPLineMove]);\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    ref: chartContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_s(TradingViewChart, \"KjcnD2K9r1XCJqX3XWUCsMm9PH8=\");\n_c2 = TradingViewChart;\nexport default TradingViewChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChartContainer\");\n$RefreshReg$(_c2, \"TradingViewChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","styled","jsxDEV","_jsxDEV","ChartContainer","div","_c","TradingViewChart","pastData","futureData","showFuture","onTPLineMove","_s","chartContainerRef","chartRef","candlestickSeriesRef","tpLineRef","timeLineRef","current","chart","width","clientWidth","height","layout","background","color","textColor","grid","vertLines","horzLines","crosshair","mode","rightPriceScale","borderColor","autoScale","timeScale","timeVisible","secondsVisible","candlestickSeries","addCandlestickSeries","upColor","downColor","borderVisible","wickUpColor","wickDownColor","handleResize","applyOptions","window","addEventListener","removeEventListener","remove","length","allData","setData","removePriceLine","createPriceLine","price","close","lineWidth","lineStyle","axisLabelVisible","title","maxPrice","Math","max","map","d","high","draggable","subscribeCustomPriceLineDragged","fitContent","error","console","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/Daniel/CascadeProjects/tp-simulator-react/src/components/TradingViewChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport styled from 'styled-components';\n\nconst ChartContainer = styled.div`\n  height: 500px;\n  width: 100%;\n  margin: 20px 0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background: white;\n`;\n\nconst TradingViewChart = ({ pastData, futureData, showFuture, onTPLineMove }) => {\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candlestickSeriesRef = useRef(null);\n  const tpLineRef = useRef(null);\n  const timeLineRef = useRef(null);\n\n  // Initialize chart\n  useEffect(() => {\n    if (!chartContainerRef.current || chartRef.current) return;\n\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 500,\n      layout: {\n        background: { color: '#ffffff' },\n        textColor: '#333',\n      },\n      grid: {\n        vertLines: { color: '#f0f0f0' },\n        horzLines: { color: '#f0f0f0' },\n      },\n      crosshair: {\n        mode: 'normal',\n      },\n      rightPriceScale: {\n        borderColor: '#ddd',\n        autoScale: true,\n      },\n      timeScale: {\n        borderColor: '#ddd',\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n\n    // Create candlestick series\n    const candlestickSeries = chart.addCandlestickSeries({\n      upColor: '#26a69a',\n      downColor: '#ef5350',\n      borderVisible: false,\n      wickUpColor: '#26a69a',\n      wickDownColor: '#ef5350'\n    });\n\n    // Store refs\n    chartRef.current = chart;\n    candlestickSeriesRef.current = candlestickSeries;\n\n    // Handle window resize\n    const handleResize = () => {\n      if (chartRef.current && chartContainerRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n        candlestickSeriesRef.current = null;\n        tpLineRef.current = null;\n        timeLineRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update data and lines\n  useEffect(() => {\n    if (!chartRef.current || !candlestickSeriesRef.current || !pastData?.length || !futureData?.length) {\n      return;\n    }\n\n    try {\n      // Update chart data\n      const allData = showFuture ? [...pastData, ...futureData] : pastData;\n      candlestickSeriesRef.current.setData(allData);\n\n      // Remove existing lines\n      if (timeLineRef.current) {\n        candlestickSeriesRef.current.removePriceLine(timeLineRef.current);\n      }\n      if (tpLineRef.current) {\n        candlestickSeriesRef.current.removePriceLine(tpLineRef.current);\n      }\n\n      // Add current time marker\n      timeLineRef.current = candlestickSeriesRef.current.createPriceLine({\n        price: pastData[pastData.length - 1].close,\n        color: '#FF0000',\n        lineWidth: 2,\n        lineStyle: 0, // Solid\n        axisLabelVisible: true,\n        title: 'Current Time',\n      });\n\n      // Add TP line\n      const maxPrice = Math.max(...allData.map(d => d.high));\n      tpLineRef.current = candlestickSeriesRef.current.createPriceLine({\n        price: maxPrice - 1,\n        color: '#2196F3',\n        lineWidth: 2,\n        lineStyle: 2, // Dashed\n        axisLabelVisible: true,\n        title: 'Take Profit',\n        draggable: true,\n      });\n\n      // Handle TP line drag\n      if (onTPLineMove) {\n        chartRef.current.subscribeCustomPriceLineDragged(tpLineRef.current, (price) => {\n          onTPLineMove(price);\n        });\n      }\n\n      // Fit content\n      chartRef.current.timeScale().fitContent();\n    } catch (error) {\n      console.error('Error updating chart:', error);\n    }\n  }, [pastData, futureData, showFuture, onTPLineMove]);\n\n  return <ChartContainer ref={chartContainerRef} />;\n};\n\nexport default TradingViewChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}