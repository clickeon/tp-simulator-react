{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\CascadeProjects\\\\tp-simulator-react\\\\src\\\\components\\\\TradingViewChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartContainer = styled.div`\n  height: 500px;\n  width: 100%;\n  margin: 20px 0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background: white;\n`;\n_c = ChartContainer;\nconst TradingViewChart = ({\n  pastData,\n  futureData,\n  showFuture,\n  onTPLineMove\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candlestickSeriesRef = useRef(null);\n  const tpLineRef = useRef(null);\n  const timeLineRef = useRef(null);\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    // Initialize chart\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 500,\n      layout: {\n        background: {\n          color: '#ffffff'\n        },\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#f0f0f0'\n        },\n        horzLines: {\n          color: '#f0f0f0'\n        }\n      },\n      crosshair: {\n        mode: 'normal'\n      },\n      rightPriceScale: {\n        borderColor: '#ddd'\n      },\n      timeScale: {\n        borderColor: '#ddd',\n        timeVisible: true,\n        secondsVisible: false\n      }\n    });\n\n    // Create candlestick series\n    const candlestickSeries = chart.addCandlestickSeries({\n      upColor: '#26a69a',\n      downColor: '#ef5350',\n      borderVisible: false,\n      wickUpColor: '#26a69a',\n      wickDownColor: '#ef5350'\n    });\n\n    // Store refs\n    chartRef.current = chart;\n    candlestickSeriesRef.current = candlestickSeries;\n\n    // Handle window resize\n    const handleResize = () => {\n      chart.applyOptions({\n        width: chartContainerRef.current.clientWidth\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      chart.remove();\n    };\n  }, []);\n  useEffect(() => {\n    if (!candlestickSeriesRef.current || !pastData || !futureData) return;\n\n    // Update chart data\n    const allData = showFuture ? [...pastData, ...futureData] : pastData;\n    candlestickSeriesRef.current.setData(allData);\n\n    // Add current time marker\n    if (timeLineRef.current) {\n      candlestickSeriesRef.current.removePriceLine(timeLineRef.current);\n    }\n    timeLineRef.current = candlestickSeriesRef.current.createPriceLine({\n      price: pastData[pastData.length - 1].close,\n      color: '#FF0000',\n      lineWidth: 2,\n      lineStyle: 0,\n      // Solid\n      axisLabelVisible: true,\n      title: 'Current Time'\n    });\n\n    // Create or update TP line\n    if (tpLineRef.current) {\n      candlestickSeriesRef.current.removePriceLine(tpLineRef.current);\n    }\n    const maxPrice = Math.max(...allData.map(d => d.high));\n    tpLineRef.current = candlestickSeriesRef.current.createPriceLine({\n      price: maxPrice - 1,\n      color: '#2196F3',\n      lineWidth: 2,\n      lineStyle: 2,\n      // Dashed\n      axisLabelVisible: true,\n      title: 'Take Profit',\n      draggable: true\n    });\n\n    // Handle TP line drag\n    if (onTPLineMove) {\n      chartRef.current.subscribeCustomPriceLineDragged(tpLineRef.current, price => {\n        onTPLineMove(price);\n      });\n    }\n\n    // Fit content\n    chartRef.current.timeScale().fitContent();\n  }, [pastData, futureData, showFuture, onTPLineMove]);\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    ref: chartContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 10\n  }, this);\n};\n_s(TradingViewChart, \"KjcnD2K9r1XCJqX3XWUCsMm9PH8=\");\n_c2 = TradingViewChart;\nexport default TradingViewChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChartContainer\");\n$RefreshReg$(_c2, \"TradingViewChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","styled","jsxDEV","_jsxDEV","ChartContainer","div","_c","TradingViewChart","pastData","futureData","showFuture","onTPLineMove","_s","chartContainerRef","chartRef","candlestickSeriesRef","tpLineRef","timeLineRef","current","chart","width","clientWidth","height","layout","background","color","textColor","grid","vertLines","horzLines","crosshair","mode","rightPriceScale","borderColor","timeScale","timeVisible","secondsVisible","candlestickSeries","addCandlestickSeries","upColor","downColor","borderVisible","wickUpColor","wickDownColor","handleResize","applyOptions","window","addEventListener","removeEventListener","remove","allData","setData","removePriceLine","createPriceLine","price","length","close","lineWidth","lineStyle","axisLabelVisible","title","maxPrice","Math","max","map","d","high","draggable","subscribeCustomPriceLineDragged","fitContent","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/Daniel/CascadeProjects/tp-simulator-react/src/components/TradingViewChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport styled from 'styled-components';\n\nconst ChartContainer = styled.div`\n  height: 500px;\n  width: 100%;\n  margin: 20px 0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background: white;\n`;\n\nconst TradingViewChart = ({ pastData, futureData, showFuture, onTPLineMove }) => {\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candlestickSeriesRef = useRef(null);\n  const tpLineRef = useRef(null);\n  const timeLineRef = useRef(null);\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    // Initialize chart\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 500,\n      layout: {\n        background: { color: '#ffffff' },\n        textColor: '#333',\n      },\n      grid: {\n        vertLines: { color: '#f0f0f0' },\n        horzLines: { color: '#f0f0f0' },\n      },\n      crosshair: {\n        mode: 'normal',\n      },\n      rightPriceScale: {\n        borderColor: '#ddd',\n      },\n      timeScale: {\n        borderColor: '#ddd',\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n\n    // Create candlestick series\n    const candlestickSeries = chart.addCandlestickSeries({\n      upColor: '#26a69a',\n      downColor: '#ef5350',\n      borderVisible: false,\n      wickUpColor: '#26a69a',\n      wickDownColor: '#ef5350'\n    });\n\n    // Store refs\n    chartRef.current = chart;\n    candlestickSeriesRef.current = candlestickSeries;\n\n    // Handle window resize\n    const handleResize = () => {\n      chart.applyOptions({\n        width: chartContainerRef.current.clientWidth\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      chart.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!candlestickSeriesRef.current || !pastData || !futureData) return;\n\n    // Update chart data\n    const allData = showFuture ? [...pastData, ...futureData] : pastData;\n    candlestickSeriesRef.current.setData(allData);\n\n    // Add current time marker\n    if (timeLineRef.current) {\n      candlestickSeriesRef.current.removePriceLine(timeLineRef.current);\n    }\n\n    timeLineRef.current = candlestickSeriesRef.current.createPriceLine({\n      price: pastData[pastData.length - 1].close,\n      color: '#FF0000',\n      lineWidth: 2,\n      lineStyle: 0, // Solid\n      axisLabelVisible: true,\n      title: 'Current Time',\n    });\n\n    // Create or update TP line\n    if (tpLineRef.current) {\n      candlestickSeriesRef.current.removePriceLine(tpLineRef.current);\n    }\n\n    const maxPrice = Math.max(...allData.map(d => d.high));\n    tpLineRef.current = candlestickSeriesRef.current.createPriceLine({\n      price: maxPrice - 1,\n      color: '#2196F3',\n      lineWidth: 2,\n      lineStyle: 2, // Dashed\n      axisLabelVisible: true,\n      title: 'Take Profit',\n      draggable: true,\n    });\n\n    // Handle TP line drag\n    if (onTPLineMove) {\n      chartRef.current.subscribeCustomPriceLineDragged(tpLineRef.current, (price) => {\n        onTPLineMove(price);\n      });\n    }\n\n    // Fit content\n    chartRef.current.timeScale().fitContent();\n  }, [pastData, futureData, showFuture, onTPLineMove]);\n\n  return <ChartContainer ref={chartContainerRef} />;\n};\n\nexport default TradingViewChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}